// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBC.Task.Repository.Database;

#nullable disable

namespace TBC.Task.Repository.Migrations
{
    [DbContext(typeof(PersonsDbContext))]
    [Migration("20230201222127_AddPersonPhotoPath")]
    partial class AddPersonPhotoPath
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TBC.Task.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rustavi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gori"
                        });
                });

            modelBuilder.Entity("TBC.Task.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FirstName", "LastName", "PersonalNumber");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TBC.Task.Domain.RelatedPerson", b =>
                {
                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("RelatedPersons");
                });

            modelBuilder.Entity("TBC.Task.Domain.Person", b =>
                {
                    b.HasOne("TBC.Task.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.OwnsOne("TBC.Task.Domain.ComplexTypes.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<string>("HomePhone")
                                .HasMaxLength(50)
                                .HasColumnType("varchar");

                            b1.Property<string>("MobilePhone")
                                .HasMaxLength(50)
                                .HasColumnType("varchar");

                            b1.Property<string>("WorkPhone")
                                .HasMaxLength(50)
                                .HasColumnType("varchar");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("City");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("TBC.Task.Domain.RelatedPerson", b =>
                {
                    b.HasOne("TBC.Task.Domain.Person", "From")
                        .WithMany("RelatedTo")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TBC.Task.Domain.Person", "To")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TBC.Task.Domain.Person", b =>
                {
                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });
#pragma warning restore 612, 618
        }
    }
}
